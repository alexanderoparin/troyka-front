// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  wallet   CreditWallet?
  jobs     GenerationJob[]
  orders   Order[]
  assets   Asset[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model CreditWallet {
  id           String              @id @default(cuid())
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String              @unique
  balanceInt   Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions CreditTransaction[]

  @@map("credit_wallets")
}

model CreditTransaction {
  id        String       @id @default(cuid())
  wallet    CreditWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId  String
  deltaInt  Int
  reason    CreditReason
  refId     String?
  createdAt DateTime     @default(now())
  meta      Json?

  @@index([createdAt])
  @@map("credit_transactions")
}

enum CreditReason {
  PURCHASE
  GENERATE
  GPT
  BONUS
  REFUND
  FREE_TRANSLATION
}

model Plan {
  id                   String  @id @default(cuid())
  name                 String
  credits              Int
  priceRub             Int
  unitPriceRubComputed Float
  isActive             Boolean @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orders               Order[]

  @@map("plans")
}

model Order {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  plan           Plan        @relation(fields: [planId], references: [id])
  planId         String
  status         OrderStatus @default(PENDING)
  robokassaInvId String?     @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  payment        Payment?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

model Payment {
  id        String        @id @default(cuid())
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String        @unique
  provider  String        @default("ROBOKASSA")
  amountRub Int
  status    PaymentStatus @default(PENDING)
  raw       Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

model GenerationJob {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  status       JobStatus @default(QUEUED)
  inputPrompt  String
  negative     String?
  model        String    @default("NANO_BANANA")
  seed         Int?
  guidance     Float?
  steps        Int?
  ratio        String    @default("3:4")
  inputUrl     String?
  falRequestId String?   @unique
  resultUrl    String?
  thumbUrl     String?
  meta         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId, createdAt])
  @@index([status])
  @@map("generation_jobs")
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
}

model Asset {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      AssetType
  url       String
  width     Int?
  height    Int?
  bytes     Int?
  createdAt DateTime  @default(now())

  @@index([userId, type])
  @@map("assets")
}

enum AssetType {
  INPUT
  OUTPUT
}

model WebhookEvent {
  id          String    @id @default(cuid())
  kind        String
  payload     Json
  processedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([kind])
  @@index([processedAt])
  @@map("webhook_events")
}
