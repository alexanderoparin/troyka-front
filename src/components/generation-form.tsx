"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/components/ui/use-toast"
import { apiClient, ImageRequest } from "@/lib/api-client"
import { FileUpload } from "@/components/file-upload"
import { ImageEditButton } from "@/components/image-edit-button"
import { useAuth } from "@/contexts/auth-context"
import { Sparkles, Wand2, CreditCard } from "lucide-react"
import Image from "next/image"
import { cn } from "@/lib/utils"
import { getPointsText, getImagesText } from "@/lib/grammar"

const generationSchema = z.object({
  prompt: z.string().min(10, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"),
  numImages: z.number().min(1).max(4).default(1),
  outputFormat: z.enum(['JPEG', 'PNG']).default('JPEG'),
})

type GenerationFormData = z.infer<typeof generationSchema>

const STYLE_PRESETS = [
  {
    name: "–°—Ç—É–¥–∏–π–Ω–∞—è —Å—ä—ë–º–∫–∞",
    prompt: "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞, —á–∏—Å—Ç—ã–π –±–µ–ª—ã–π —Ñ–æ–Ω, —Å—Ç—É–¥–∏–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å",
    icon: "üì∏"
  },
  {
    name: "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", 
    prompt: "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Ç–æ–≤–∞—Ä–∞, –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω, —á–∏—Å—Ç—ã–π —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω",
    icon: "üé®"
  },
  {
    name: "–ü—Ä–µ–º–∏—É–º",
    prompt: "—Ä–æ—Å–∫–æ—à–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –ø–æ–¥–∞—á–∞, –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å",
    icon: "‚ú®"
  },
  {
    name: "Lifestyle",
    prompt: "–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞, —Ç–µ–ø–ª–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å",
    icon: "üåü"
  },
]

export function GenerationForm() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [uploadedImages, setUploadedImages] = useState<string[]>([])
  const [generatedImages, setGeneratedImages] = useState<string[]>([])
  const { toast } = useToast()
  const { points, refreshPoints } = useAuth()

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
  } = useForm<GenerationFormData>({
    resolver: zodResolver(generationSchema),
    defaultValues: {
      prompt: "",
      numImages: 1,
      outputFormat: 'JPEG',
    },
  })

  const prompt = watch("prompt")
  const canGenerate = true // –ü–æ–∫–∞ —á—Ç–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∏–Ω—Ç–æ–≤

  const onSubmit = async (data: GenerationFormData) => {
    if (!canGenerate) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        variant: "destructive",
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const requiredPoints = data.numImages * 3
    if (points < requiredPoints) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤",
        description: `–¢—Ä–µ–±—É–µ—Ç—Å—è ${getPointsText(requiredPoints)}, —É –≤–∞—Å ${getPointsText(points)}`,
        variant: "destructive",
      })
      return
    }

    setIsGenerating(true)

    try {
      const request: ImageRequest = {
        prompt: data.prompt,
        imageUrls: uploadedImages.length > 0 ? uploadedImages : undefined,
        numImages: data.numImages,
        outputFormat: data.outputFormat
      }

      const response = await apiClient.generateImage(request)

      if (response.data) {
        setGeneratedImages(response.data.imageUrls)
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(async () => {
          await refreshPoints()
        }, 1000)
        toast({
          title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!",
          description: `–°–ø–∏—Å–∞–Ω–æ ${getPointsText(requiredPoints)}. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É`,
        })
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        setValue("prompt", "")
        setUploadedImages([])
      } else {
        throw new Error(response.error || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
      }
      
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const handleFileUploaded = (fileUrl: string) => {
    setUploadedImages(prev => [...prev, fileUrl])
  }

  const handleFileRemoved = (fileUrl: string) => {
    setUploadedImages(prev => prev.filter(url => url !== fileUrl))
  }

  const applyStylePreset = (preset: typeof STYLE_PRESETS[0]) => {
    const currentPrompt = prompt?.trim() || ""
    const newPrompt = currentPrompt 
      ? `${currentPrompt}, ${preset.prompt}`
      : preset.prompt
    setValue("prompt", newPrompt)
  }

  return (
    <div className="generation-form space-y-6">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Prompt Input - Main Required Field */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 mb-2">
            <Label htmlFor="prompt" className="text-base font-semibold">
              –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            </Label>
            <Badge variant="destructive" className="text-xs">
              –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            </Badge>
          </div>
          <div className="relative">
            <Textarea
              {...register("prompt")}
              placeholder={uploadedImages.length > 0
                ? "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–Ω –±–µ–ª—ã–º, –¥–æ–±–∞–≤–∏—Ç—å –º—è–≥–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã..."
                : "–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä: –∫—Ä–∞—Å–∏–≤—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ, —Å—Ç—É–¥–∏–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ..."
              }
              className={cn(
                "min-h-[120px] text-base resize-none border-2 rounded-xl px-4 py-3",
                "focus:ring-2 focus:ring-primary/20 focus:border-primary",
                "placeholder:text-muted-foreground/60",
                errors.prompt && "border-destructive focus:border-destructive"
              )}
            />
            <div className="absolute bottom-3 right-3 text-xs text-muted-foreground">
              {prompt?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤
            </div>
          </div>
          
          {errors.prompt && (
            <p className="text-sm text-destructive flex items-center gap-1">
              <span className="w-1 h-1 bg-destructive rounded-full"></span>
              {errors.prompt.message}
            </p>
          )}
        </div>

        {/* Optional Image Upload Area */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 mb-2">
            <Label className="text-base font-semibold">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            </Label>
            <Badge variant="secondary" className="text-xs">
              –ü–æ –∂–µ–ª–∞–Ω–∏—é
            </Badge>
          </div>
          <div className="p-4 border-2 border-dashed border-muted-foreground/25 rounded-xl bg-muted/20">
            <FileUpload
              onFileUploaded={handleFileUploaded}
              onFileRemoved={handleFileRemoved}
              uploadedFiles={uploadedImages}
              maxFiles={1}
              accept="image/*"
              className="w-full"
            />
            <p className="text-xs text-muted-foreground mt-2 text-center">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            </p>
          </div>
        </div>

        {/* Style Presets */}
        {uploadedImages.length === 0 && (
          <div className="space-y-3">
            <h4 className="text-sm font-medium text-muted-foreground">–°—Ç–∏–ª–∏ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è:</h4>
            <div className="style-presets grid grid-cols-2 gap-2">
              {STYLE_PRESETS.map((preset) => (
                <Button
                  key={preset.name}
                  type="button"
                  variant="ghost"
                  onClick={() => applyStylePreset(preset)}
                  className={cn(
                    "h-auto p-3 flex-col items-start gap-2 text-left",
                    "hover:bg-primary/5 hover:border-primary/20 border border-transparent",
                    "transition-all duration-200"
                  )}
                >
                  <div className="flex items-center gap-2 w-full">
                    <span className="text-lg">{preset.icon}</span>
                    <span className="text-sm font-medium">{preset.name}</span>
                  </div>
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* Generation Options */}
        <div className="generation-options grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="numImages" className="text-sm font-medium">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            </Label>
            <Select
              value={watch("numImages")?.toString()}
              onValueChange={(value) => setValue("numImages", parseInt(value))}
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1">1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</SelectItem>
                <SelectItem value="2">2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</SelectItem>
                <SelectItem value="3">3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</SelectItem>
                <SelectItem value="4">4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="outputFormat" className="text-sm font-medium">
              –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </Label>
            <Select
              value={watch("outputFormat")}
              onValueChange={(value) => setValue("outputFormat", value as 'JPEG' | 'PNG')}
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="JPEG">JPEG (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                <SelectItem value="PNG">PNG (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Balance Info */}
        <div className="balance-info flex items-center justify-between p-4 bg-muted/50 rounded-xl border">
          <div className="flex items-center gap-2">
            <CreditCard className="h-4 w-4 text-primary" />
            <span className="text-sm font-medium">–í–∞—à –±–∞–ª–∞–Ω—Å:</span>
            <span className="text-sm font-bold text-primary">{getPointsText(points)}</span>
          </div>
          <div className="text-sm text-muted-foreground">
            –°—Ç–æ–∏–º–æ—Å—Ç—å: {getPointsText(watch("numImages") * 3)}
          </div>
        </div>

        {/* Generate Button */}
        <Button
          type="submit"
          disabled={isGenerating || !canGenerate || !prompt?.trim()}
          className={cn(
            "generate-button w-full h-14 text-base font-semibold rounded-xl",
            "bg-gradient-to-r from-primary to-primary/80",
            "hover:from-primary/90 hover:to-primary/70",
            "disabled:opacity-50 disabled:cursor-not-allowed",
            "transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]",
            "shadow-lg hover:shadow-xl"
          )}
        >
          {isGenerating ? (
            <div className="flex items-center gap-3">
              <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
              <span>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</span>
              <div className="flex gap-1">
                <div className="w-1 h-1 bg-white/60 rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                <div className="w-1 h-1 bg-white/60 rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                <div className="w-1 h-1 bg-white/60 rounded-full animate-bounce"></div>
              </div>
            </div>
          ) : (
            <div className="flex items-center gap-3">
              <Wand2 className="w-5 h-5" />
              <span>
                {uploadedImages.length > 0 
                  ? "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
                  : `–°–æ–∑–¥–∞—Ç—å ${getImagesText(watch("numImages"))}`}
              </span>
              <div className="flex items-center gap-1 text-sm opacity-80">
                <Sparkles className="w-3 h-3" />
                <span>{getPointsText(watch("numImages") * 3)}</span>
              </div>
            </div>
          )}
        </Button>

        {/* Info Message */}
        {!canGenerate && (
          <div className="rounded-xl bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-orange-500/20 p-4">
            <div className="flex items-center gap-3">
              <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
              <div>
                <p className="text-sm font-medium text-orange-600 dark:text-orange-400">
                  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                </p>
                <p className="text-xs text-muted-foreground">
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Info */}
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
            <div className="w-1 h-1 bg-primary rounded-full"></div>
            <span>
              {uploadedImages.length > 0 
                ? "–ò–ò –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é" 
                : "–ò–ò —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"}
            </span>
            <div className="w-1 h-1 bg-primary rounded-full"></div>
          </div>
          <p className="text-xs text-muted-foreground">
            –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Ä¢ 5-10 —Å–µ–∫—É–Ω–¥ ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
          </p>
        </div>
      </form>

      {/* Generated Images */}
      {generatedImages.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {generatedImages.map((imageUrl, index) => (
              <div key={index} className="relative group">
                <Image
                  src={apiClient.getFileUrl(imageUrl)}
                  alt={`Generated image ${index + 1}`}
                  width={400}
                  height={533}
                  className="rounded-lg object-cover aspect-3-4 w-full shadow-lg"
                />
                <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors rounded-lg flex items-center justify-center gap-2 opacity-0 group-hover:opacity-100">
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => window.open(apiClient.getFileUrl(imageUrl), '_blank')}
                  >
                    –û—Ç–∫—Ä—ã—Ç—å
                  </Button>
                  <ImageEditButton
                    imageUrl={imageUrl}
                    originalPrompt={prompt}
                    onImageEdited={(newImages) => {
                      setGeneratedImages(newImages);
                      toast({
                        title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",
                        description: "–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
                      });
                    }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}